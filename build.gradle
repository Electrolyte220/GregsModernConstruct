plugins {
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.moddev.legacyforge' version '2.0.73'
    id 'io.freefair.lombok' version '8.6'
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
legacyForge {
    version = "${minecraft_version}-${forge_version}"

    validateAccessTransformers = true

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    mods {
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }

    runs {
        configureEach {
            logLevel = org.slf4j.event.Level.DEBUG

            //programArguments.addAll('mixin.env.remapRefMap', 'true')
            //programArguments.addAll('mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg")
        }

        client {
            client()
        }

        server {
            server()
        }

        data {
            data()

            sourceSet = sourceSets.main

            gameDirectory.set(file("run/data"))

            programArguments.addAll("--mod", mod_id)
            programArguments.addAll("--all")
            programArguments.addAll("--output", file("src/generated/resources/").getAbsolutePath())
            programArguments.addAll("--existing", file("src/main/resources/").getAbsolutePath())
            programArguments.addAll("--existing-mod", "tconstruct")
        }
    }

    parchment {
        minecraftVersion = "${minecraft_version}"
        mappingsVersion = "${mapping_version}"
    }
}


sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url = 'https://maven.tterrag.com/'
        content {
            includeGroup "com.tterrag.registrate"
        }
    }

    maven { url = 'https://maven.blamejared.com'
        content {
            includeGroup "mezz.jei"
        }
    }

    maven { url = 'https://maven.firstdarkdev.xyz/snapshots'
        content {
            includeGroup 'com.lowdragmc.ldlib'
        }
    }

    maven { url = 'https://maven.gtceu.com'
        content {
            includeGroup 'com.gregtechceu.gtceu'
        }
    }

    maven { url = 'https://dvs1.progwml6.com/files/maven'
        content {
            includeGroup 'slimeknights.tconstruct'
            includeGroup 'slimeknights.mantle'
        }
    }

    maven { url = 'https://cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }

    maven { url = 'https://maven.architectury.dev/'
        content {
            includeGroup "dev.architectury"
        }
    }

    maven { url = 'https://maven.saps.dev/minecraft'
        content {
            includeGroup 'dev.latvian.mods'
        }
    }

    maven { url = 'https://maven.parchmentmc.org' }
    maven { url = 'https://maven.neoforged.net/releases' }
}

dependencies {
    annotationProcessor "org.spongepowered:mixin:0.8.7:processor"

    implementation 'org.jetbrains:annotations:24.0.0'

    modImplementation "com.tterrag.registrate:Registrate:${registrate_version}"
    modImplementation "com.gregtechceu.gtceu:gtceu-${minecraft_version}:${gtceu_version}:slim"
    modImplementation "slimeknights.mantle:Mantle:${minecraft_version}-${mantle_version}"
    modImplementation "slimeknights.tconstruct:TConstruct:${minecraft_version}-${tinkers_version}"

    modRuntimeOnly "mezz.jei:jei-${minecraft_version}-forge:${jei_version}"
    modRuntimeOnly "com.lowdragmc.ldlib:ldlib-forge-${minecraft_version}:${ldlib_version}"
    modRuntimeOnly "curse.maven:configuration-444699:${configuration_cf_version}"
    modRuntimeOnly "dev.architectury:architectury-forge:${architectury_version}"
    modRuntimeOnly "dev.latvian.mods:rhino-forge:${rhino_version}"
    modRuntimeOnly "dev.latvian.mods:kubejs-forge:${kubejs_version}"
}

mixin {
    add sourceSets.main, "gm_construct-refmap.json"
    config "gm_construct.mixins.json"
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
            gtceu_version: gtceu_version, tconstruct_version: tinkers_min_version,
            configuration_version: configuration_version
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1',
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                'MixinConfigs': 'gm_construct.mixins.json'
        ])
    }

    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}
